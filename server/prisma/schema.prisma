generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  full_name       String
  profile_photo   String    @default("https://ca.slack-edge.com/T2JUP6F0A-U03L7HL9WBF-g6ea89c2bc88-512")
  email           String    @unique
  phone           String?
  date_of_birth   DateTime?
  address         String?
  title           String?
  biography       String?
  national        String?
  realname        String?
  short_biography String?

  password              String
  refresh_token         String?
  is_premium            Boolean   @default(false)
  is_verified           Boolean   @default(false)
  verify_token          String?
  forgot_password_token String?
  is_deleted            Boolean   @default(false)
  deleted_at            DateTime?
  is_artist             Boolean   @default(false) // trường này để phân biệt user có phải là nghệ sỹ hay ko 

  favourite_playlists FavouritePlaylist[]
  favourite_songs     FavouriteSong[]
  history_songs       HistorySong[]
  playlists           UserPlaylist[]
  songs               Song[]              @relation("uploaded")
}

model Song {
  id                String          @id @default(uuid())
  url               String
  thumbnail         String
  name              String
  singer_name       String
  user_id           String
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  duration          Float
  privacy           Privacy         @default(private)
  public_at         DateTime?
  is_deleted        Boolean         @default(false)
  deleted_at        DateTime?
  normalized_name   String?
  user              User            @relation("uploaded", fields: [user_id], references: [id])
  liked_by          FavouriteSong[]
  lyric             Lyric?
  belong_playlists  PlaylistSong[]
  history_by        HistorySong[]
  belong_categories Category[]
}

model Playlist {
  id               String              @id @default(uuid())
  title            String
  creator_id       String
  privacy          Privacy             @default(private)
  play_random      Boolean             @default(true)
  public_at        DateTime?
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
  thumbnail        String              @default("https://photo-zmp3.zmdcdn.me/album_default.png")
  is_deleted       Boolean             @default(false)
  deleted_at       DateTime?
  normalized_title String?
  liked_by         FavouritePlaylist[]
  has_songs        PlaylistSong[]
  categories       Category[]
  is_album         Boolean             @default(false) // trường này để phân biệt là album của 1 ca sỹ hay chỉ là tập hợp các bài hát của nhiều ca sỹ
  is_offical       Boolean             @default(false) // trường này để phân biệt với playlist của user và playlist của admin

  users UserPlaylist[]
}

model PlaylistSong {
  playlist_id String
  song_id     String
  created_at  DateTime @default(now())
  position    Int
  playlist    Playlist @relation(fields: [playlist_id], references: [id])
  song        Song     @relation(fields: [song_id], references: [id])

  @@id([playlist_id, song_id])
}

model FavouritePlaylist {
  user_id     String
  playlist_id String
  created_at  DateTime @default(now())
  playlist    Playlist @relation(fields: [playlist_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@id([user_id, playlist_id])
}

model FavouriteSong {
  user_id    String
  song_id    String
  created_at DateTime @default(now())
  song       Song     @relation(fields: [song_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([user_id, song_id])
}

model HistorySong {
  user_id    String
  song_id    String
  created_at DateTime @default(now())
  song       Song     @relation(fields: [song_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([user_id, song_id])
}

model UserPlaylist {
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  playlist    Playlist @relation(fields: [playlist_id], references: [id])
  playlist_id String

  type       UserPlaylistType @default(personal)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@id([user_id, playlist_id])
}

model Category {
  id            String     @id @default(uuid())
  name          String
  thumbnail     String?
  parent_id     String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  is_deleted    Boolean    @default(false)
  deleted_at    DateTime?
  cover         String?
  parent        Category?  @relation("NestCategory", fields: [parent_id], references: [id])
  children      Category[] @relation("NestCategory")
  has_playlists Playlist[]
  has_songs     Song[]
}

model Lyric {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  song_id    String     @unique
  status     Int?
  song       Song       @relation(fields: [song_id], references: [id])
  sentences  Sentence[]
}

model Sentence {
  id         String   @id @default(uuid())
  lyric_id   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  lyric      Lyric    @relation(fields: [lyric_id], references: [id])
  words      Word[]
}

model Word {
  id          String   @id @default(uuid())
  start_time  Int
  end_time    Int
  data        String
  sentence_id String
  sentence    Sentence @relation(fields: [sentence_id], references: [id])
}

enum Privacy {
  private
  public
}

enum UserPlaylistType {
  own // chính artist này thể hiện những ca khúc có trong playlist này (chỉ dành cho user có là artist)
  member // artist này góp mặt trong playlist này (gồm nhiều artist nữa) (chỉ dành cho user có là artist)
  personal // đây chỉ là playlist cá nhân của một user (có thể là user bình thường, cũng có thể là artist)
}
